@page "/data-upload"
@using System.Diagnostics.CodeAnalysis;
@using System.IO.Pipes;
@using Microsoft.Extensions.Options;
@*@inject IOptionsMonitor<WebsiteOptions> SiteOptions*@

<h3>数据上传</h3>
<div class="row g-3">
    <div class="col-12 col-sm-6">
        <label for="text1" class="form-label">地点</label>
        <Select Value="@ChbTitle" Items="@Locations" />
    </div>
    <div class="col-12 col-sm-6">
        <label for="text1" class="form-label">工作位置</label> 
        <input id="text1" class="form-control">
    </div>
    <div class="col-12">
        <label for="text3" class="form-label">谱图数据</label>
        <InputUpload TValue="string" ShowDeleteButton="true" OnChange="@OnFileChange" OnDelete="@OnFileDelete"></InputUpload>
        <ButtonUpload TValue="string" IsMultiple="true" ShowProgress="true" OnChange="@OnClickToUpload" OnDelete="@(fileName => Task.FromResult(true))"></ButtonUpload>
    </div>
</div>
<ConsoleLogger @ref="Logger" class="mt-3" />

@code {
    [NotNull]
    private ConsoleLogger? Logger { get; set; }

    private string? ChbTitle { get; set; } = "地点";
    public List<SelectedItem> Locations { get; set; } = new List<SelectedItem>();

    protected override Task OnInitializedAsync()
    {
        List<string> locations = new List<string> { "南京", "铜陵", "白银" };
        Locations = locations.Select(t => new SelectedItem(t, t)).ToList();
        return Task.FromResult("");
    }

    private Task OnFileChange(UploadFile file)
    {
        // 未真正保存文件
        // file.SaveToFile()
        Logger.Log($"{file.File!.Name} 上传成功！");
        return Task.FromResult("");
    }

    private Task<bool> OnFileDelete(UploadFile item)
    {
        Logger.Log($"{item.OriginFileName} 数据删除！");
        return Task.FromResult(true);
    }

    private Task OnClickToUpload(UploadFile file)
    {
        return Task.CompletedTask;
    }

    private async Task<bool> SaveToFile(UploadFile file)
    {
        // Server Side 使用
        // Web Assembly 模式下必须使用 webapi 方式去保存文件到服务器或者数据库中
        // 生成写入文件名称
        var ret = false;
        if (!string.IsNullOrEmpty(SiteOptions.CurrentValue.WebRootPath))
        {
            var uploaderFolder = Path.Combine(SiteOptions.CurrentValue.WebRootPath, $"images{Path.DirectorySeparatorChar}uploader");
            file.FileName = $"{Path.GetFileNameWithoutExtension(file.OriginFileName)}-{DateTimeOffset.Now:yyyyMMddHHmmss}{Path.GetExtension(file.OriginFileName)}";
            var fileName = Path.Combine(uploaderFolder, file.FileName);

            ReadToken ??= new CancellationTokenSource();
            ret = await file.SaveToFileAsync(fileName, MaxFileLength, ReadToken.Token);

            if (ret)
            {
                // 保存成功
                file.PrevUrl = $"images/uploader/{file.FileName}";
            }
            else
            {
                var errorMessage = $"{Localizer["UploadsSaveFileError"]} {file.OriginFileName}";
                file.Code = 1;
                file.Error = errorMessage;
                await ToastService.Error(Localizer["UploadFile"], errorMessage);
            }
        }
        else
        {
            file.Code = 1;
            file.Error = Localizer["UploadsWasmError"];
            await ToastService.Information(Localizer["UploadsSaveFile"], Localizer["UploadsSaveFileMsg"]);
        }
        return ret;
    }
}

