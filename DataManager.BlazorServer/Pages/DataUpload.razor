@page "/data-upload"
@using System.Diagnostics.CodeAnalysis;
@using System.IO.Pipes;
@using DataManager.Database;
@using Microsoft.Extensions.Options;
@*@inject IOptionsMonitor<WebsiteOptions> SiteOptions*@

<h3>数据上传</h3>
<div class="row g-3">
    <div class="col-12 col-sm-6">
        <label for="text1" class="form-label">地点</label>
        <Select @bind-Value="@Location" Items="@Locations" />
    </div>
    <div class="col-12 col-sm-6">
        <label for="text1" class="form-label">工作位置</label> 
        <Select @bind-Value="@WorkPosition" Items="@WorkPositions"/>
    </div>
    <div class="col-12">
        <ButtonUpload TValue="string" BrowserButtonText="光谱数据" BrowserButtonIcon="fa-solid fa-cloud-arrow-up" IsMultiple="true" ShowProgress="true" OnChange="@OnClickToUpload" 
        OnDelete="@(fileName => Task.FromResult(true))"></ButtonUpload>
    </div>
</div>
<ConsoleLogger @ref="Logger" class="mt-3" />

@code {
    [NotNull]
    private ConsoleLogger? Logger { get; set; }

    private string Location { get; set; } = "地点";
    public List<SelectedItem> Locations { get; set; } = new List<SelectedItem>();

    private string? WorkPosition{ get; set; }
    public List<SelectedItem> WorkPositions { get; set; } = new List<SelectedItem>();

    protected override Task OnInitializedAsync()
    {
        List<string> locations = new List<string> { "南京", "铜陵", "白银" };
        Locations = locations.Select(t => new SelectedItem(t, t)).ToList();

        WorkPositions.Clear();
        List<string> positions = new List<string> { "工位1", "工位2", "工位3" };
        WorkPositions = positions.Select(t => new SelectedItem(t, t)).ToList();
        return Task.FromResult("");
    }

    private Task OnFileChange(UploadFile file)
    {
        // 未真正保存文件
        // file.SaveToFile()
        Logger.Log($"{file.File!.Name} 上传成功！");
        return Task.FromResult("");
    }

    private Task<bool> OnFileDelete(UploadFile item)
    {
        Logger.Log($"{item.OriginFileName} 数据删除！");
        return Task.FromResult(true);
    }

    private Task OnClickToUpload(UploadFile file)
    {
        return SaveToFile(file);
    }

    private async Task<bool> SaveToFile(UploadFile file)
    {
        //file.Size = 1024000;
        // Server Side 使用
        // Web Assembly 模式下必须使用 webapi 方式去保存文件到服务器或者数据库中
        // 生成写入文件名称
        MemoryStream ms = new MemoryStream();
        bool result=await file.SaveToFileAsync("F:\\Temp\\Temp.pwb",maxAllowedSize:20*1000*1000);
        
        byte[] buffers = File.ReadAllBytes("F:\\Temp\\Temp.pwb");
        //D:\\LibsData\\LIBS_20230624\\SGGL-6H1-20_230624001646\\Times_0.pwb
        specdata data = specdata.Parser.ParseFrom(buffers);
        DbSpectrumItem item = new DbSpectrumItem(data,Location);
        item.WorkLocation = WorkPosition;
        return item.Save();
    }
}

